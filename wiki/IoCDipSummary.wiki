#labels Featured
This is a summary of how I see Dependency Injection and Inversion Of Control at this point in my coding career.  

==Dependencies==
Whenever you have code reference another module or code somewhere else, you have a dependency.  This is all fine and dandy except when you want to change a bit of code but leave the rest of it the same.  

Say you have a database access class, but you want to test all the code that interacts with it?  Say you have a file writer class in one format, but your customer wants you to add another file format with the same information?  In all these cases testing becomes painful, you have to start working with physical files and databases and all sorts of things can make your testing flaky and inconsistent (Python makes this less an issue but I'll get to that later).

==Dependency Injection==
So now you know what a Dependency is.  Dependency Injection just means you add that dependency from "outside of the class" either in a function parameter, an __init__ constructor, or a setter on a property or attribute.  Even in languages like Python that let you easily override a function, property or constructor, this is arguably good design to make your code more readable, and more generic and reusable. 

==Inversion Of Control==
Inversion of Control refers to having your code depend on something in between your classes. Say you have a FileWriter class that depends on a CSVFormat class.  You can "invert" control of the FileWriter class to depend on a Format class which CSVFormat would inherit from.  So control is now hinging around the Format class instead of the CSVFormat class. 

This is done in Java, C# and C++ with abstract classes or interfaces. Duck typing in python means this is not very necessary other than for code readability (this is an EXTREMELY heated topic for some, I don't care but generally feel IoC is not needed in python at all). Several Python projects have tried to enhance Python with contracts, or stronger interface support.

Oddly enough my IoC container therefore does not emphasize it's name very much and instead focuses far more heavily on tying dependencies together for you. But hopefully now you have some idea of why IoC containers came into existence and why users of C# and Java get so excited about them...it makes those languages more like Python able to take any class you want in a method and have your code just work.